/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(TOUCH_EVENTS)

#include "JSTouchEvent.h"

#include <wtf/GetPtr.h>

#include "JSDOMWindow.h"
#include "JSTouchList.h"
#include "TouchEvent.h"
#include "TouchList.h"

#include <runtime/Error.h>
#include <runtime/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSTouchEvent)

/* Hash table */

static const HashTableValue JSTouchEventTableValues[5] =
{
    { "touches", DontDelete|ReadOnly, (intptr_t)jsTouchEventTouches, (intptr_t)0 },
    { "targetTouches", DontDelete|ReadOnly, (intptr_t)jsTouchEventTargetTouches, (intptr_t)0 },
    { "changedTouches", DontDelete|ReadOnly, (intptr_t)jsTouchEventChangedTouches, (intptr_t)0 },
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsTouchEventConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSTouchEventTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 63, JSTouchEventTableValues, 0 };
#else
    { 10, 7, JSTouchEventTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSTouchEventConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSTouchEventConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSTouchEventConstructorTableValues, 0 };
#else
    { 1, 0, JSTouchEventConstructorTableValues, 0 };
#endif

class JSTouchEventConstructor : public DOMObject {
public:
    JSTouchEventConstructor(ExecState* exec)
        : DOMObject(JSTouchEventConstructor::createStructure(exec->lexicalGlobalObject()->objectPrototype()))
    {
        putDirect(exec->propertyNames().prototype, JSTouchEventPrototype::self(exec), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValuePtr proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, ImplementsHasInstance)); 
    }
};

const ClassInfo JSTouchEventConstructor::s_info = { "TouchEventConstructor", 0, &JSTouchEventConstructorTable, 0 };

bool JSTouchEventConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTouchEventConstructor, DOMObject>(exec, &JSTouchEventConstructorTable, this, propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSTouchEventPrototypeTableValues[2] =
{
    { "initTouchEvent", DontDelete|Function, (intptr_t)jsTouchEventPrototypeFunctionInitTouchEvent, (intptr_t)9 },
    { 0, 0, 0, 0 }
};

static const HashTable JSTouchEventPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSTouchEventPrototypeTableValues, 0 };
#else
    { 2, 1, JSTouchEventPrototypeTableValues, 0 };
#endif

const ClassInfo JSTouchEventPrototype::s_info = { "TouchEventPrototype", 0, &JSTouchEventPrototypeTable, 0 };

JSObject* JSTouchEventPrototype::self(ExecState* exec)
{
    return getDOMPrototype<JSTouchEvent>(exec);
}

bool JSTouchEventPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSTouchEventPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSTouchEvent::s_info = { "TouchEvent", &JSUIEvent::s_info, &JSTouchEventTable, 0 };

JSTouchEvent::JSTouchEvent(PassRefPtr<Structure> structure, PassRefPtr<TouchEvent> impl)
    : JSUIEvent(structure, impl)
{
}

JSObject* JSTouchEvent::createPrototype(ExecState* exec)
{
    return new (exec) JSTouchEventPrototype(JSTouchEventPrototype::createStructure(JSUIEventPrototype::self(exec)));
}

bool JSTouchEvent::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSTouchEvent, Base>(exec, &JSTouchEventTable, this, propertyName, slot);
}

JSValuePtr jsTouchEventTouches(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    UNUSED_PARAM(exec);
    TouchEvent* imp = static_cast<TouchEvent*>(static_cast<JSTouchEvent*>(asObject(slot.slotBase()))->impl());
    return toJS(exec, WTF::getPtr(imp->touches()));
}

JSValuePtr jsTouchEventTargetTouches(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    UNUSED_PARAM(exec);
    TouchEvent* imp = static_cast<TouchEvent*>(static_cast<JSTouchEvent*>(asObject(slot.slotBase()))->impl());
    return toJS(exec, WTF::getPtr(imp->targetTouches()));
}

JSValuePtr jsTouchEventChangedTouches(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    UNUSED_PARAM(exec);
    TouchEvent* imp = static_cast<TouchEvent*>(static_cast<JSTouchEvent*>(asObject(slot.slotBase()))->impl());
    return toJS(exec, WTF::getPtr(imp->changedTouches()));
}

JSValuePtr jsTouchEventConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    return static_cast<JSTouchEvent*>(asObject(slot.slotBase()))->getConstructor(exec);
}
JSValuePtr JSTouchEvent::getConstructor(ExecState* exec)
{
    return getDOMConstructor<JSTouchEventConstructor>(exec);
}

JSValuePtr jsTouchEventPrototypeFunctionInitTouchEvent(ExecState* exec, JSObject*, JSValuePtr thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSTouchEvent::s_info))
        return throwError(exec, TypeError);
    JSTouchEvent* castedThisObj = static_cast<JSTouchEvent*>(asObject(thisValue));
    TouchEvent* imp = static_cast<TouchEvent*>(castedThisObj->impl());
    TouchList* touches = toTouchList(args.at(exec, 0));
    TouchList* targetTouches = toTouchList(args.at(exec, 1));
    TouchList* changedTouches = toTouchList(args.at(exec, 2));
    const UString& type = args.at(exec, 3).toString(exec);
    DOMWindow* view = toDOMWindow(args.at(exec, 4));
    int screenX = args.at(exec, 5).toInt32(exec);
    int screenY = args.at(exec, 6).toInt32(exec);
    int clientX = args.at(exec, 7).toInt32(exec);
    int clientY = args.at(exec, 8).toInt32(exec);

    imp->initTouchEvent(touches, targetTouches, changedTouches, type, view, screenX, screenY, clientX, clientY);
    return jsUndefined();
}


}

#endif // ENABLE(TOUCH_EVENTS)
